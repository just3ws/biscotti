#!/usr/bin/env ruby
# frozen_string_literal: true

Signal.trap('INT') { exit(130) }
Signal.trap('SIGINT') { exit(130) }
Signal.trap('TERM') { exit(143) }

require 'bundler/setup'

$LOAD_PATH.unshift("#{__dir__}/../lib")

require 'biscotti'
require 'biscotti/cli'

BISCOTTI_HOME = File.realpath(File.join(File.dirname(__FILE__), '..'))

begin
  options = Biscotti::CLI::OptParser.parse!(ARGV)

  dictionary_file = options.fetch(:dictionary, File.join(BISCOTTI_HOME, 'data', 'biscotti', 'words.lst')).freeze

  # Raise error if dictionary file doesn't exist or cannot be read.

  dictionary = Biscotti.load_dictionary(dictionary_file).freeze

  letters = ARGV.flat_map { |word| word.downcase.split('') }.sort.join

  min_word_length = 2

  output = Biscotti.find_words(
    letters,
    dictionary: dictionary,
    min_word_length: min_word_length
  )

  output.each do |word|
    $stdout.puts(word)
  end
rescue Errno::EPIPE
  exit(74)
end
